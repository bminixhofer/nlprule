name: CI

on:
  release:
    types: [published]
  push:
    branches:
      - main
  pull_request:

jobs:
  rust:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        lang: ["en", "de", "es"] # TODO: load this from build/languages.txt
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
      - run: |
          mkdir data
          mkdir storage

          cd data
          wget https://f000.backblazeb2.com/file/nlprule/${{ matrix.lang }}.zip
          unzip ${{ matrix.lang }}.zip
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --all-features
      - run: rustup component add clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
      - uses: actions-rs/cargo@v1
        env:
          RUST_LOG: INFO
        with:
          command: run
          args: --all-features --bin compile -- --build-dir data/${{ matrix.lang }} --tokenizer-out storage/${{ matrix.lang }}_tokenizer.bin --rules-out storage/${{ matrix.lang }}_rules.bin
      - uses: actions-rs/cargo@v1
        if: matrix.lang == 'en'
        with:
          command: test
          args: --verbose --all-features -p nlprule
      - uses: actions-rs/cargo@v1
        env:
            RUST_LOG: WARN
        with:
          command: run
          args: --all-features --bin test_disambiguation -- --tokenizer storage/${{ matrix.lang }}_tokenizer.bin
      - uses: actions-rs/cargo@v1
        env:
            RUST_LOG: WARN
        with:
          command: run
          args: --all-features --bin test -- --tokenizer storage/${{ matrix.lang }}_tokenizer.bin --rules storage/${{ matrix.lang }}_rules.bin
      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: storage/*

  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      # Required as the JSON input file needs to be read
      - uses: actions/checkout@v2      
      - id: set-matrix
        uses: JoshuaTheMiller/conditional-build-matrix@0.0.1
        with:
          # inputFile: '.github/workflows/matrix_includes.json' # Default input file path
          filter: '[?runOnEvent==`${{ github.event_name }}` || runOnEvent==`always`]'

  python:
    needs: [matrix_prep, rust]
    strategy:      
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.os }}
    env:
      working-directory: python
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1 # maturin needs Rust (obviously)
        with:
          profile: minimal
          toolchain: stable
      # this can cause errors because it is assumed that there
      # are only wheels for the current python version in target/wheels
      # - uses: Swatinem/rust-cache@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v2
        with:
          name: binaries
          path: storage
      - name: Install GSED (if needed) # needed by set_version.sh
        if: matrix.os == 'macos-latest'
        run: |
          brew install gnu-sed
      - name: Update version (if release)
        if: github.event_name == 'release'
        run: |
          bash scripts/set_version.sh ${{ github.event.release.tag_name }}
      - name: Build and Test
        run: |
          python -m pip install --upgrade pip
          pip install maturin==0.8.3 pytest==6.1.2
         
          bash scripts/maturin.sh build --interpreter python --release --manylinux 1

          pip install $(ls target/wheels/* | head -n1)
          pytest python/test.py -s
        shell: bash
      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v2
        with:
          name: python-wheel
          path: target/wheels/*

  publish:
    runs-on: ubuntu-latest
    needs: [rust, python]
    if: github.event_name == 'release'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - uses: actions/download-artifact@v2
        with:
          name: python-wheel
          path: python-wheel
      - uses: actions/download-artifact@v2
        with:
          name: binaries
          path: storage
      - run: |
          gzip storage/en_tokenizer.bin
          gzip storage/en_rules.bin
          gzip storage/de_tokenizer.bin
          gzip storage/de_rules.bin
      - name: Update version
        run: |
          bash scripts/set_version.sh ${{ github.event.release.tag_name }}
      - name: Publish on crates.io
        run: | # --allow-dirty is only needed b/c of the README.md, we can be sure it is clean otherwise anyway because it is freshly checked out
          cargo login $CARGO_KEY

          cd nlprule
          cp ../README.md README.md
          cargo publish --allow-dirty
          rm README.md
          cd ..

          cd build
          cargo publish --allow-dirty
          cd ..
        env:
          CARGO_KEY: ${{ secrets.CARGO_KEY }}
      - name: Publish on PyPI
        run: |
          pip install twine==3.3
          twine upload python-wheel/*
        env:
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
      - name: Upload release binaries
        uses: alexellis/upload-assets@0.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["./storage/*"]'
      - run: |
          rm -r python-wheel
          rm -r storage
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: v${{ github.event.release.tag_name }}
          branch: master